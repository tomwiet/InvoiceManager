@model InvoiceManager.Models.ViewModels.EditInvoiceViewModel

@{
    ViewBag.Title = Model.Heading;
    
 
}

<h1 class="mb-3">@Model.Heading</h1>
@if (Model.Invoice.Id != 0)
{
    <button class="btn btn-primary mb-3"
            onclick='window.location.href="@Url.Action("InvoicePosition", "Home",
                                          new {invoiceId = Model.Invoice.Id})"'>
        Dodaj pozycje
    </button>

    <button class="btn btn-secondary mb-3"
            onclick="generatePdf()">
        Generuj PDF
    </button>
    <button class="btn btn-secondary mb-3"
            onclick="printInvoice()">
        Drukuj
    </button>
}

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("Invoice", "Home"))
        {
            @Html.AntiForgeryToken();
            @Html.ValidationSummary();

            if (Model.Invoice.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">
                    Pola tytuł, klient, sposób płatności i termin są
                    <strong>wymagane</strong>
                </p>
            }
            @Html.HiddenFor(x => x.Invoice.Id)
            @Html.HiddenFor(x => x.Invoice.UserId)

            <div class="row mb-3">
                @Html.LabelFor(x => x.Invoice.Title)
                @Html.TextBoxFor(x => x.Invoice.Title,
                new { @class = "form-control mt-3", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.Invoice.Title)
            </div>
            <div class="row">
                @Html.LabelFor(x => x.Invoice.ClientId)
                <div class="row mb-3">
                    
                    <div class="col-lg-10">
                        @Html.DropDownListFor(x => x.Invoice.ClientId,
                        new SelectList(Model.Clients, "Id", "Name"),
                        "--Wybierz klienta--",

                        new { @class = "form-control mt-3" })
                    </div>
                    <div class="col-lg-1 mt-3">
                        <button class="btn btn-sm btn-outline-dark"
                                onclick='window.location.href =
                                    "@Url.Action("Client", "Client")"'
                                type="button">
                        +
                        </button>

                    </div>
                    
                    
                </div>    
                @Html.ValidationMessageFor(x => x.Invoice.ClientId)
                
            </div>
            if (Model.Invoice.Id != 0)
            {
                <div class="row mb-3">
                    @Html.LabelFor(x => x.Invoice.Value)
                    @Html.TextBoxFor(x => x.Invoice.Value,
                    new { @class = "form-control mt-3", @readonly = "readonly" })
                </div>
            }
            <div class="row mb-3 ">
                @Html.LabelFor(x => x.Invoice.MethodOfPaymentId)
                @Html.DropDownListFor(x => x.Invoice.MethodOfPaymentId,
                new SelectList(Model.MethodOfPayments, "Id", "Name"),
                "--Wybierz sposób płatności--",
                new { @class = "form-control mt-3" })
                @Html.ValidationMessageFor(x => x.Invoice.MethodOfPaymentId)
            </div>
            <div class="row mb-3 ">
                @Html.LabelFor(x => x.Invoice.PaymentDate)
                @Html.TextBoxFor(x => x.Invoice.PaymentDate, "{0:dd-MM-yyyy}",
                new
                     {
                        @class = "form-control mt-3",
                        @id = "PaymentDate",
                        autocomplete = "off"
                })
                @Html.ValidationMessageFor(x => x.Invoice.PaymentDate)
            </div>
            <div class="row mb-3">
                @Html.LabelFor(x => x.Invoice.Comments)

                @Html.TextAreaFor(x => x.Invoice.Comments,
                new { @class = "form-control mt-3" })
                @Html.ValidationMessageFor(x => x.Invoice.Comments)
            </div>
            <button class="btn btn-primary btn-lg mb-5"
                    type="submit">
                Zapisz
            </button>


        }
    </div>
    <div class="col-5 offset-lg-1">
        @if (Model.Invoice.Id != 0)
        {
            @Html.Partial("_InvoicePosition", Model.Invoice.InvoicePositions)

        }
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">

        function generatePdf() {

            $.ajax({
                type: 'POST',
                url: "@Url.Action("InvoiceToPdf", "Print")",
                data: {
                    id: '@Model.Invoice.Id'
                },
                success: function (data) {
                    window.location = '@Url.Action("DownloadInvoicePdf", "Print")' + '?fileGuid=' + data.FileGuid + '&fileName=' + data.FileName;
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json',
                cache: false
            });

        }

        function deleteInvoicePosition(id, invoiceId, btn) {

            if (!confirm("Czy na pewno chcesz usunąć pozycję?"))
                return;

            $.ajax({
                type: 'POST',
                url: "@Url.Action("DeletePosition", "Home")",
                data: {
                    id: id,
                    invoiceId: invoiceId
                },
                success: function (data) {
                    if (data.Success) {
                        var row = btn.parentNode.parentNode;
                        row.parentNode.removeChild(row);

                        $('#Invoice_Value').val(data.InvoiceValue.toFixed(2).replace(".", ","));
                    } else {
                        alert(data.Message);
                    }
                },
                error: function (data) {
                    alert(data.Message);
                },
                dataType: 'json'
            });
        }

        $(document).ready(function () {

            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }

            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };


            $('#PaymentDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });

        });

    </script>
}

